/**
 * Часть 2 — Числа-градины :)
 * В книге Дугласа Хофштадтера "Гёдель, Эшер, Бах" (удостоенная Пулитцеровской премии) упоминаются различные
 * интересные задачки, которые, в какой-то степени, могут быть рассмотрены через призму программирования. Вот одна из них:
 * <p>
 * Взять какое-то положительное целое число и назвать его n
 * Если n — четное, то поделить его на 2
 * Если n — нечетное, то умножить на 3 и добавить 1
 * Продолжать этот процесс до тех пор пока n не равно 1
 * Вот, например, процесс для числа 15:
 * <p>
 * 15 — нечетное, значит нужно умножить на 3 и добавить 1, получим 46
 * 46 — четное, значит нужно поделить на 2, получим 23
 * 23 — нечетное, значит нужно умножить на 3 и добавить 1, получим 70
 * 70 — четное, значит нужно поделить на 2, получим 35
 * 35 — нечетное, значит нужно умножить на 3 и добавить 1, получим 106
 * 106 — четное, значит нужно поделить на 2, получим 53
 * 53 — нечетное, значит нужно умножить на 3 и добавить 1, получим 160
 * 160 — четное, значит нужно поделить на 2, получим 80
 * 80 — четное, значит нужно поделить на 2, получим 40
 * 40 — четное, значит нужно поделить на 2, получим 20
 * 20 — четное, значит нужно поделить на 2, получим 10
 * 10 — четное, значит нужно поделить на 2, получим 5
 * 5 — нечетное, значит нужно умножить на 3 и добавить 1, получим 16
 * 16 — четное, значит нужно поделить на 2, получим 8
 * 8 — четное, значит нужно поделить на 2, получим 4
 * 4 — четное, значит нужно поделить на 2, получим 2
 * 2 — четное, значит нужно поделить на 2, получим 1
 * конец.
 * Итак, мы видим взлёты и падения, но все приходит к 1.
 * Это похоже на то, как град держится в облаках, но в какой-то момент падает на землю, поэтому и называется эта
 * последовательность "Числами-градинами"
 * <p>
 * В общем, вам нужно написать программу, считывающую у человека число и выдающую похожее на это:
 * <p>
 * Enter a number: 17
 * 17 is odd so I make 3n + 1: 52
 * 52 is even so I take half: 26
 * ...
 * Что интересно, никто не доказал, что может существовать число, которое не приведёт к 1 в итоге, с другой стороны
 * нет доказательства обратного.
 */

package com.shpp.p2p.cs.vkravchenko.assignment3;

import com.shpp.cs.a.console.TextProgram;

public class Assignment3Part2 extends TextProgram {

    /**
     * ask enter number > 1 . If no error or Exseption run findOne().
     */
    public void run() {
        try {                           // Exception if user enter not number
            int n;
            while ((n = readInt("Enter a number: ")) <= 1) ; // loop ask number if <=1

            findOne(n);
        } catch (Exception e) {
            println(e);
        }
    }

    /**
     * @param n - root number to do find 1.
     */
    private void findOne(int n) {

        while (n > 1) {

            if ((n % 2) == 0) {
                print(n + " is even so I take half: ");
                n /= 2;
                println(n);

            } else {
                print(n + " is odd so I make 3n + 1: ");
                n = n * 3 + 1;
                println(n);
            }
        }
    }
}